* 11/09/11 -> Welcome to the Journal 
This is the beginning of a journal about my
experiences and current state of understanding
of Whalesong. 

The last couple of weeks I hit a bit of a wall
in figuring out the triangle primitives. This
journal entry will help me figure out what I
need to do to get unstuck.

Here are some questions that I have on my mind.
I should be able to explain exactly how these
work.

** How do the images work?
** How does Whalesong itself work?
** How do I set up WeScheme running on my machine?
** What have I done so far?
** What is the structure of Whalesong?
** Document what I have done in a "Whalesong Note"?
** Should I submit at a regular time/date? 

** Summary of whalesong/image/private
There are six files in the whalesong/image/private
directory.

** What is the prototype structure of the Image files?
   
* 11/09/12 -> A Couple of Goals. One of which is Complete.
Activities for today. 

1- Describe in detail how the TriangleImage code
   from the kernel.js file works. (did not complete)
2- Make a github reference sheet. (completed)

* 11/09/13 -> High Level Overview of Compilers
Today I spent some time taking a step back
and looking at the idea of a compiler in
general. An online article by Steve Yegge
fired me up (get reference). I took notes
on GoogleDocs about it. He breaks down
the structure of compilers and why they are
important in a very clear way. Also, I
found an article called "How does a compiler/
interpreter work?" at forums.devshed.com.

Here are some notes on "Hdac/iw?":

Everything you were afraid to ask about how a compiler/interpreter works.

Source File -> Scanner -> Lexer -> Parser -> Interpreter/Code Generator
(sf) -> (sc) -> (lx) -> (ps) -> (i/cg)

(sf) -> program that is read by the interpreter
(sc) -> module1 of the (c/i) -> reads (sf) 
(lx) -> module2 of the (c/i) -> chunks (sf) into tokens/types
(ps) -> module3 of the (c/i) -> deals with syntax / "speaks" with lexer
(i/cg) -> module4 of the (c/i) -> "takes the action that is specified by a program statement"??

This is a good ideal model to have in mind, as I
can use it to compare against Whalesong to see how they
are different and in which ways they are similar.

Structure of the Whalesong Compiler -> in gwdean-ese circa 9/2011
-----------------------------------------------------------------
(...the following is a compression of the Whalesong
Github page circa August/September 2011...)

http://hashcollision.org/whalesong/index.html for documentation

prereq: Racket 5.1.1
usage:  (...stuff...things...)

Architecture
-------------
1- Reuse most of the Racket compiler infrastructure.
2- Racket compiler produces bytecode from Racket Source
3- Racket compiler also performs macro expansion and module-level optimizations
4- Bytecode is parsed using the compiler/zo-parse collection to get an AST
5- The AST is compiled into an intermediate language
6- Assemble JavaScript

Architecture in Diagrams
------------------------
JS -> AST -> IL
parse-bytecode.rkt -> compiler.rkt -> assembler.rkt

IL is intended to be translated straightforwardly.
Assembler to JavaScript
Simulator (simulator.rkt) allows for controlled tests

Some important files
--------------
parser/parse-bytecode.rkt -> reuses Racket compiler to produce AST structures in compiler/zo-parse
compiler/compiler.rkt     -> translates the AST to the intermediate language
                          -> compiler is a variation on the register compiler of sicp/5.5
                          -> trying to generate code that works effectively on the Racket Machine 
il-structs.rkt            -> defines intermediate language
simulator/simulator.rkt   -> simulator for the il
test-simulator.rkt        -> to see the simulator in action
test-compiler.rkt         -> to see how the output of the compiler can be fed into the simulator

Assumed Machine
---------------
Stack machine with the following atomic registers:

val: value
proc: procedure
argcount: number of arguments

and two stack registers:

env: environment stack
control: control stack

js-assembler/assemble.rkt
-------------------------
Assembler tricks to make things like tail calls work (..stuff...things...)
Assembler depends on the functions in mini-runtime.js
As soon as the compiler stabilizes, Moby Scheme runtime will be pulled into the project
Assembled output distinguishes between Primitives and Closures
Primitives are only allowed to return single values back + no higher-order procedure calls
Closures have full access to the machine and doing stuff with continuations

Tests
-----
The test suite in test-all.rkt runs the test suite
Need a web browser

References
----------
Whalesong uses code from: jshashtable,js-numbers,JSON,jquery

** Sample Source Code -> "boring old factorial"
-----------------------------------------------
#lang planet dyoo/whalesong
(provide fact)
(define (fact x)
  (cond
    [(= x 0)
     1]
    [else
     (* x (fact (sub1 x)))]))
* 11/09/14 -> Compiler Notes
I stayed with my Compiler studies for another day, and I
spent much of the day looking through the SICP book, since
Whalesong is based in part on its structure.

To help track my progress, I also started a sicp.org page
in my logics folder. The notes on describing machine 
designs are pretty complete. I worked a lot on understanding
how to draw the data path and controller diagrams. 
* 11/09/15 -> SICP
My readings of the last few days and nights has shed
new light on SICP. It makes a lot more sense now that
I have a reason to learn it. Before it was just cool
looking, now I can see a lot of the logic coming through.

I am reading it almost like a novel right now. A lot of
concepts I glazed over make more sense than before. I'm on
page 53, dealing with the section on Procedures as
Parameters. I started to see how certain examples 
build on each other. For instance, the GCD means a lot
more now that I see that it is used to demonstrate how
the register machine in section 5.1.

Also, I enjoyed finding Adbulaziz Ghoulom's interesting
paper called "An Incremental Approach to Compiler
Construction" in which he summarizes how to build a 
compiler in Scheme in only a dozen pages or so. Great
for portability!!!
* 11/09/16 -> Back to the Images
Now that I've taken a few days to understand compilers better,
I can return to the images with fresh eyes. Perhaps this would
be the time (9:12 am, riding on a bus from Providence to NY)
to figure out what I need to do next to make the images render
properly. 

There seem to be two major bottlenecks right now that I need
to master before I can finish the project. The first is understanding
how the canvas drawing procedure works. The second is understanding
how to test my results in an effective manner. 

** Part One -> triangle/sas function
Part one involves understanding how we can make a function for
the "triangle/sas" family that resembles the one for the RightTriangleImage
found in kernel.js file. 

The part I am currently hung up on is the part of the 
render function that contains the canvas drawing procedure. 

ctx.save();
ctx.beginPath();
ctx.moveTo(x, y+this.side2);
ctx.lineTo(x+this.side1, y+this.side2);
ctx.lineTo(x, y);
ctx.closePath();

Lets work through this for (x,y,side1,side2) -> (0,0,100,200)

moveTo(0,200)
lineTo(100,200)
lineTo(0,0)

The goal is to find a similar procedure that will allow us to draw
the triangle/sas series of triangles. 

In Racket, the function for drawing a triangle/sas that will
create the same output as the RightTriangle immediately above
looks like: (triangle/sas 100 90 200 "solid" "red").

Using the above notation we have (x,y,side1,angle2,side3) -> (0,0,100,90,200)

moveTo(x,y+this.side3) -> moveTo(0,200)

(!!!...The Next Step is a mystery...!!!!)

** Part Two -> testing the results
* 11/09/19 -> jQuery Day
Due to some events occuring over the weekend, I decided
to start looking at some jQuery. Plus, since I am in NY,
that will be a good topic for riding along the subway,
reading and taking notes from the jQuery Pocket Guide that
I have with me. I will have the Whalesong notes with me
as well, so I will be looking at those as well.
* 11/09/27 -> Triangle/Sas Assignment
** Assignment Overview
Got caught up in some more networking/job stuff which 
distracted me again. I'm back in NYC and I was able
to make some progress on the algorithm. I have a rough
draft of the algorithm working, but I haven't fully
tested it out in depth yet. However, my skills in
JavaScript are slowly starting to improve. Working
with Haverbeke's "Eloquent JavaScript" and jQuery has
helped deepen my JavaScript understanding a bit.

So what do I have to do before I am happy? There are
two basic things I need to do before I can get this
off my mind for a while. 

First, I have to describe what all of the six files
in the images folder actually do. I did this earlier,
but now I've spent so much time working out the 
the details of the algorithm, I lost some touch with
that aspect of the project.

Second, I need to write an explanation of how the algorithm
works. Thus, (First, and Second) represent what I need to
explain. Also, I should be clear on how to test the 
files. 
** Six Files
*** color.rkt  -> no change
*** colordb.js -> no change
*** js-impl.js -> moderate change
*** kernel.js  -> major change
*** main.rkt   -> minor change 
*** racket-impl.rkt -> minor change
** Working of the algorithm
The first draft of the working algorithm can be found
in the 20110927-Best.html file. (Unfortunate name, but
I'm not creative right now). The core of the algorithm
looks like this:
*** Triangle/Sas 0.1
var ctx = canvas.getContext('2d');
          var x = 50;
          var y = 50;
          var a = 100;
          var b = 10;
          var c = 50;
          var radians = b * 0.0174532952;
          var height = a * Math.sin(radians);
          var width = Math.sqrt((a * a) - (height * height));

          // works for <90

          ctx.beginPath();
          ctx.moveTo(x,y);
          ctx.lineTo(c+x,y);
          ctx.lineTo((c-width)+x,height+y);
          ctx.lineTo(x,y);
          ctx.fill();

An Explanation will follow later.
** Testing?

* 11/09/28 -> Completed second part of the algorithm.
Made a simple change to the algorithm, extending it
to cover triangles which have angle values of greater
than 90 degrees. I am saving this as a new file called
my-triangle-sas.js.
* Reference
---------
** Whalesong README
*** Header 
Whalesong: a compiler from Racket to JavaScript.
Danny Yoo (dyoo@cs.wpi.edu)

======================================================================
See:  http://hashcollision.org/whalesong/index.html for documentation.

The rest of the content in this document will migrate there shortly.


======================================================================

Prerequisite: Racket 5.1.1.  The majority of the project is written
Typed Racket, and I highly recommend you use a version of Racket
that's at least 5.1.1; otherwise, compilation may take an unusual
amount of time.

======================================================================

*** Example usage
Create a simple, standalong executable of your program.  At the
moment, the program must be written in the base language of whalesong.
(This restriction currently prevents arbitrary racket/base programs
from compiling, and we'll be working to remove this restriction.)

    $ cat hello.rkt 
    #lang planet dyoo/whalesong
    (display "hello world")
    (newline)

    $ ./whalesong.rkt build hello.rkt

    $ ls -l hello.xhtml
    -rw-rw-r-- 1 dyoo nogroup 692213 Jun  7 18:00 hello.xhtml


[FIXME: add more examples]


======================================================================

*** Architecture

The basic idea is to reuse most of the Racket compiler infrastructure.
We use the underlying Racket compiler to produce bytecode from Racket
source; it also performs macro expansion and module-level
optimizations for us.  We parse that bytecode using the
compiler/zo-parse collection to get an AST, compile that to an
intermediate language, and finally assemble JavaScript.


                        AST          IL                     JS
 parse-bytecode.rkt ----------> compiler.rkt --------> assembler.rkt ------->
    (todo)


The IL is intended to be translated straightforwardly.  We currently
have an assembler to JavaScript, as well as a simulator
(simulator.rkt).  The simulator allows us to test the compiler in a
controlled environment.



======================================================================

*** parser/parse-bytecode.rkt

This is intended to reuse the Racket compiler to produce the AST
structures defined in compiler/zo-parse.


======================================================================

*** compiler/compiler.rkt

translates the AST to the intermediate language.  The compiler has its
origins in the register compiler in Structure and Interpretation of
Computer Programs:

    http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-35.html#%_sec_5.5

with some significant modifications.  Since this is a stack machine,
we don't need any of the register-saving infrastructure in the
original compiler.  We also need to support slightly different linkage
structures, since we want to support multiple value contexts.  We're
trying to generate code that works effectively on a machine like the
one described in:

    http://plt.eecs.northwestern.edu/racket-machine/



The intermediate language is defined in il-structs.rkt, and a
simulator for the IL in simulator/simulator.rkt.  See
test-simulator.rkt to see the simulator in action, and
test-compiler.rkt to see how the output of the compiler can be fed
into the simulator.



The assumed machine is a stack machine with the following atomic
registers:

    val: value
    proc: procedure
    argcount: number of arguments

and two stack registers:

    env: environment stack
    control: control stack



======================================================================

*** js-assembler/assemble.rkt

The JavaScript assembler plays a few tricks to make things like tail
calls work:

   * Each basic block is translated to a function taking a MACHINE
     argument.

   * Every GOTO becomes a function call.

   * The head of each basic-blocked function checks to see if we
     should trampoline
     (http://en.wikipedia.org/wiki/Trampoline_(computers))

   * We support a limited form of computed jump by assigning an
     attribute to the function corresponding to a return point.  See
     the code related to the LinkedLabel structure for details.


Otherwise, the assembler is fairly straightforward.  It depends on
library functions defined in mini-runtime.js.  As soon as the compiler
stabilizes, we will be pulling in the runtime library in Moby Scheme
into this project.


The assembled output distinguishes between Primitives and Closures.
Primitives are only allowed to return single values back, and are not
allowed to do any higher-order procedure calls.  Closures, on the
other hand, have full access to the machine, but they are responsible
for calling the continuation and popping off their arguments when
they're finished.




======================================================================

*** Tests

The test suite in test-all.rkt runs the test suite.  You'll need to
run this on a system with a web browser, as the suite will evaluate
JavaScript and make sure it is producing values.  A bridge module
browser-evaluate.rkt brings up a temporary web server that allows us
to pass values between Racket and the JavaScript evaluator on the
browser.



======================================================================

*** Acknowledgements and Thanks


This uses code from the following projects:

   jshashtable (http://www.timdown.co.uk/jshashtable/)
   js-numbers (http://github.com/dyoo/js-numbers/)
   JSON (http://www.json.org/js.html)
   jquery (http://jquery.com/)


   [FIXME: add more]

** Links
http://planet.racket-lang.org/package-source/dyoo/whalesong.plt/1/0/planet-docs/manual/index.html

* Github reference sheet
** Create a new repository
http://help.github.com/create-a-repo/
** Normal workflow
http://learn.github.com/p/normal.html
** Cheat Sheet
http://help.github.com/git-cheat-sheets/

** Useful commands
*** Updating a remote repository
git add .
git commit . m 'message'
git push origin master

* Emacs reference
Toggle line numbers: Ctrl-F5

